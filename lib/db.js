// Generated by CoffeeScript 2.0.2
var DB, assert, flat, fs, match, path, reporter, type;

match = require('micromatch');

path = require('path');

fs = require('fs-extra');

type = require('path-type');

assert = require('assert');

reporter = require('./reporter.js');

flat = function(arr) {
  var f, res;
  res = [];
  f = function(mas) {
    var i, item, len, results;
    results = [];
    for (i = 0, len = mas.length; i < len; i++) {
      item = mas[i];
      if (Array.isArray(item)) {
        results.push(f(item));
      } else {
        results.push(res.push(item));
      }
    }
    return results;
  };
  f(arr);
  return res;
};

DB = class DB {
  constructor(path1) {
    var sf;
    this.path = path1;
    assert(this.path, 'Path must be defined!');
    this.files = {};
    sf = this;
    this.index = 0;
    Object.defineProperty(this, '_map', {
      get: function() {
        var index, r, results;
        r = [];
        results = [];
        for (index in sf.files) {
          results.push(r.push(index));
        }
        return results;
      }
    });
    Object.defineProperty(this, '_exists', {
      get: function() {
        return fs.pathExistsSync(sf.path) && type.dirSync(sf.path) && fs.pathExistsSync(path.resolve(sf.path, './map.json'));
      }
    });
    if (this._exists) {
      reporter.loading(this.path);
      this._load();
    } else {
      reporter.creating(this.path);
      this._init();
    }
  }

  _init() {
    fs.mkdirpSync(this.path);
    return fs.writeFileSync(path.resolve(this.path, './map.json'), JSON.stringify(this._map));
  }

  _load() {
    var map, text;
    text = fs.readFileSync;
    return map = JSON.parse;
  }

  write() {
    var file, name, ref;
    ref = this.files;
    for (name in ref) {
      file = ref[name];
      fs.writeFileSync(path.resolve(this.path, name), file);
    }
    return fs.writeFileSync(path.resolve(this.path, './map.json'), JSON.stringify(this._map));
  }

  add() {
    var file, i, len, ref, results;
    ref = flat(arguments);
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      file = ref[i];
      results.push(this.files[++this.index] = file);
    }
    return results;
  }

};

module.exports = {DB};
