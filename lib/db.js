// Generated by CoffeeScript 2.0.2
var DATA, DB, assert, flat, fs, match, path, reporter, type;

match = require('micromatch');

path = require('path');

fs = require('fs-extra');

type = require('path-type');

assert = require('assert');

DATA = './data.json';

reporter = require('./reporter.js');

flat = function(arr) {
  var f, res;
  res = [];
  f = function(mas) {
    var i, item, len, results;
    results = [];
    for (i = 0, len = mas.length; i < len; i++) {
      item = mas[i];
      if (Array.isArray(item)) {
        results.push(f(item));
      } else {
        results.push(res.push(item));
      }
    }
    return results;
  };
  f(arr);
  return res;
};

DB = (function() {
  class DB {
    constructor(path1) {
      var sf;
      this.path = path1;
      assert(this.path, 'Path must be defined!');
      this.files = {};
      sf = this;
      this.index = 0;
      Object.defineProperty(this, '_exists', {
        get: function() {
          return fs.pathExistsSync(sf.path) && type.dirSync(sf.path) && fs.pathExistsSync(path.resolve(sf.path, DATA));
        }
      });
      Object.defineProperty(this, '_data', {
        get: function() {
          var index;
          return {
            index: sf.index,
            files: (function() {
              var results;
              results = [];
              for (index in sf.files) {
                results.push(index);
              }
              return results;
            })()
          };
        }
      });
      if (this._exists) {
        reporter.loading(this.path);
        this._load();
      } else {
        reporter.creating(this.path);
        this._init();
      }
      this._proxify();
    }

    // DASH
    _init() {
      fs.mkdirpSync(this.path);
      return fs.writeFileSync(path.resolve(this.path, DATA), JSON.stringify(this._data));
    }

    _load() {
      var data, file, files, i, len, results, text;
      text = fs.readFileSync(path.resolve(this.path, DATA));
      data = JSON.parse(text);
      files = data.files;
      this.index = data.index;
      results = [];
      for (i = 0, len = files.length; i < len; i++) {
        file = files[i];
        results.push(this.files[file] = fs.readFileSync(path.resolve(this.path, './' + file)).toString());
      }
      return results;
    }

    _proxify() {
      var sf;
      sf = this;
      return this.files = new Proxy(this.files, {
        get: function(obj, prop) {
          return obj[prop];
        },
        set: function(obj, prop, value) {
          obj[prop] = value;
          sf.write(prop, value);
          return obj[prop];
        },
        deleteProperty: function(obj, prop) {
          delete obj[prop];
          sf._delete(prop);
        }
      });
    }

    _delete(file) {
      fs.removeSync(path.resolve(this.path, file));
      return fs.writeFileSync(path.resolve(this.path, DATA), JSON.stringify(this._data));
    }

    write(prop, value) {
      var file, name, ref;
      fs.re;
      if ((prop != null) && (value != null)) {
        fs.writeFileSync(path.resolve(this.path, prop), value);
      } else {
        ref = this.files;
        for (name in ref) {
          file = ref[name];
          fs.writeFileSync(path.resolve(this.path, name), file);
        }
      }
      return fs.writeFileSync(path.resolve(this.path, DATA), JSON.stringify(this._data));
    }

    add() {
      var file, i, len, ref, results;
      ref = flat(arguments);
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        file = ref[i];
        results.push(this.files[++this.index] = file);
      }
      return results;
    }

  };

  DB.prototype.push = DB.prototype.add;

  return DB;

})();

module.exports = {DB};
